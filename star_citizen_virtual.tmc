// -----------------------------------------------------------------------------
// The MIT License (MIT)
// 
// Copyright (c) 2014 Alex McLain
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// -----------------------------------------------------------------------------

// TARGET Script
include "target.tmh"
include "usb_keys.tmh"

// User-editiable axis curves.
int x_curve = 0;
int y_curve = 0;
int throttle_curve = 0;
int strafe_x_curve = 0;
int strafe_y_curve = 0;
int aim_x_curve = 0;
int aim_y_curve = 0;

// Delay in milliseconds to determine a "long" button press for commands
// that have a short/long option.
int long_delay_amount = 500;

// Key Bindings
define SC_ROLL_AXIS                     DX_X_AXIS
define SC_PITCH_AXIS                    DX_Y_AXIS
define SC_THROTTLE_AXIS                 DX_THROTTLE_AXIS

define SC_WEAPON_GROUP_1                DX1
define SC_WEAPON_GROUP_2                DX6
define SC_LAUNCH_MISSILE                DX2
define SC_IFCS_TOGGLE                   DX5
define SC_LAUNCH_COUNTERMEASURE         DX15
define SC_SCOREBOARD                    DX4
define SC_TARGET_NEAREST_HOSTILE        DX7
define SC_TARGET_HOSTILE_FWD            DX9
define SC_PIN_FOCUSED_TARGET            DX11
define SC_TARGET_ALL_FWD                DX8
define SC_TARGET_ALL_BACK               DX10
define SC_MISSILE_CYCLE_FWD             DX12
define SC_MISSILE_CYCLE_BACK            DX14
define SC_POWER_GROUP_1                 USB_1
define SC_POWER_GROUP_2                 USB_2
define SC_POWER_GROUP_3                 USB_3
define SC_POWER_GROUP_RESET             USB_4
define SC_RADAR_ZOOM                    DX18
define SC_COUNTERMEASURE_CYCLE_FWD      DX17
define SC_SHIELD_FWD                    DX22
define SC_SHIELD_AFT                    DX24
define SC_SHIELD_LEFT                   DX25
define SC_SHIELD_RIGHT                  DX23
define SC_SHIELD_RESET                  DX26
define SC_SHIELD_BOOST_RECHARGE         USB_C
define SC_BRAKE                         DX20
define SC_AFTERBURNER                   DX32
define SC_AIM_RESET                     USB_RIGHT_SHIFT
define SC_HUD_OVERVIEW                  USB_F1
define SC_HUD_WEAPONS                   USB_F2
define SC_HUD_POWER                     USB_F3
define SC_HUD_SHIELDS                   USB_F4
define SC_IFCS_DECOUPLE                 DX21
define SC_EJECT                         DX30
define SC_USE_DOCKING                   DX31
define SC_RUNNING_LIGHTS                USB_O
define SC_CABIN_LIGHTS                  USB_O
define SC_HUD_TAB_1                     USB_F1
define SC_HUD_TAB_2                     USB_F2
define SC_HUD_TAB_3                     USB_F3
define SC_HUD_TAB_4                     USB_F4
define SC_HUD_TAB_5                     USB_F5
define SC_HUD_TAB_6                     USB_F6
define SC_HUD_TAB_7                     USB_F7
define SC_HUD_TAB_8                     USB_F8
define SC_HUD_TAB_9                     USB_F9
define SC_HUD_TAB_10                    USB_F10
define SC_HUD_MAXIMIZE                  USB_F11
define SC_HUD_CONFIRM                   USB_RETURN
define SC_HUD_LEFT_PANEL_UP             USB_UP_ARROW
define SC_HUD_LEFT_PANEL_DOWN           USB_DOWN_ARROW
define SC_HUD_LEFT_PANEL_LEFT           USB_LEFT_ARROW
define SC_HUD_LEFT_PANEL_RIGHT          USB_RIGHT_ARROW
define SC_HUD_MODE_FWD                  USB_SEMICOLON
define SC_HUD_MODE_BACK                 USB_APOSTROPHE


int main()
{
    Configure(&HCougar, MODE_EXCLUDED);
    Configure(&T16000, MODE_EXCLUDED);
    
    if(Init(&EventHandle)) return 1;
    
    SetKBRate(32, 50);
    SetKBLayout(KB_ENG);
    SetShiftButton(0, 0, 0, 0, 0, 0);
    
    // -------------
    // Joystick Axes
    // -------------
    MapAxis(&Joystick, JOYX, SC_ROLL_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    SetSCurve(&Joystick, JOYX, 0, 0, 0, x_curve, 0);
    MapAxis(&Joystick, JOYY, SC_PITCH_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    SetSCurve(&Joystick, JOYY, 0, 0, 0, y_curve, 0);
    
    // -------------
    // Throttle Axes
    // -------------
    
    // Throttle
    MapAxis(&Throttle, THR_RIGHT, SC_THROTTLE_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    SetSCurve(&Throttle, THR_RIGHT, 0, 0, 0, throttle_curve, 0);
    
    // Slew Control - Strafe
    MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    SetSCurve(&Throttle, SCX, 0, 0, 0, strafe_x_curve, 0);
    MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    SetSCurve(&Throttle, SCY, 0, 0, 0, strafe_y_curve, 0);
    
    // TODO: Slew Control - Aim
    // MapAxis(&Throttle, SCX, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    // SetSCurve(&Throttle, SCX, 0, 0, 0, aim_x_curve, 0);
    // MapAxis(&Throttle, SCY, DX_ZROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    // SetSCurve(&Throttle, SCY, 0, 0, 0, aim_y_curve, 0);
    
    // ----------------
    // Joystick Buttons
    // ----------------
    
    // Trigger
    // Selectable with pinky switch. -------------------------------------------
    // Swaps lasers and guns.
    //       FWD - TODO: Expose group 3/4?
    //       MID - Normal:   TG1=Group1, TG2=Group2
    //       AFT - Reversed: TG1=Group2, TG2=Group1
    // -------------------------------------------------------------------------
    MapKey(&Joystick, TG1, EXEC("weapon_selector();"));
    MapKey(&Joystick, TG2, EXEC("weapon_selector();"));
    
    MapKeyR(&Joystick, TG1, EXEC("weapon_selector();"));
    MapKeyR(&Joystick, TG2, EXEC("weapon_selector();"));
    
    // Reevaluate logic when pinky switch changes state.
    MapKey(&Throttle, PSM, EXEC("weapon_selector();"));
    MapKey(&Throttle, PSB, EXEC("weapon_selector();"));
    
    // MMCB
    MapKey(&Joystick, S1, SC_IFCS_TOGGLE); // Short
    // MapKey(&Joystick, S1, SC_USE_DOCKING); // Long
    
    // Weapon Release
    MapKey(&Joystick, S2, SC_LAUNCH_MISSILE);
    
    // NWS
    MapKey(&Joystick, S3, SC_LAUNCH_COUNTERMEASURE);
    
    // Paddle Switch
    MapKey(&Joystick, S4, SC_SCOREBOARD);
    
    // TMS Hat
    MapKey(&Joystick, H2U, TEMPO(
        SC_TARGET_NEAREST_HOSTILE, // Short
        SC_PIN_FOCUSED_TARGET,     // Long
        long_delay_amount
    ));
    MapKey(&Joystick, H2D, SC_TARGET_HOSTILE_FWD); // Short
    // MapKey(&Joystick, H2D,  TARGET_NEAREST_LANDZONE); // Long
    // TODO: Fwd/Back modified by LASTE switch ---------------------------------
    //       PATH    - Friendlies
    //       ALT/HDG - All
    //       ALT     - Hostile
    // -------------------------------------------------------------------------
    MapKey(&Joystick, H2L, SC_TARGET_ALL_BACK);
    MapKey(&Joystick, H2R, SC_TARGET_ALL_FWD);
    
    // DMS Hat
    // Modified by EAC switch --------------------------------------------------
    //       ARM - Power Management
    //       OFF - Missile Select
    // -------------------------------------------------------------------------
    MapKey(&Joystick, H3U, EXEC("power_selector();"));
    MapKey(&Joystick, H3D, EXEC("power_selector();"));
    MapKey(&Joystick, H3L, EXEC("power_selector();"));
    MapKey(&Joystick, H3R, EXEC("power_selector();"));
    
    MapKeyR(&Joystick, H3U, EXEC("power_selector();"));
    MapKeyR(&Joystick, H3D, EXEC("power_selector();"));
    MapKeyR(&Joystick, H3L, EXEC("power_selector();"));
    MapKeyR(&Joystick, H3R, EXEC("power_selector();"));
    
    MapKey(&Throttle, EACON, EXEC("power_selector();"));
    MapKey(&Throttle, EACOFF, EXEC("power_selector();"));
    
    // CMS Hat
    MapKey(&Joystick, H4U, SC_LAUNCH_COUNTERMEASURE);
    MapKey(&Joystick, H4D, SC_COUNTERMEASURE_CYCLE_FWD);
    MapKey(&Joystick, H4L, SC_RADAR_ZOOM);
    MapKey(&Joystick, H4R, SC_RADAR_ZOOM);
    // MapKey(&Joystick, H4P, RADAR_ACTIVE_PASSIVE); // Short
    // MapKey(&Joystick, H4P, RADAR_ON_OFF); // Long
    
    // Unnecessary unless overriding DX hat.
    // MapKey(&Joystick, H1U, );
    // MapKey(&Joystick, H1D, );
    // MapKey(&Joystick, H1L, );
    // MapKey(&Joystick, H1R, );
    
    // ----------------
    // Throttle Buttons
    // ----------------
    
    // Coolie Hat
    MapKey(&Throttle, CSU, SC_HUD_OVERVIEW);
    MapKey(&Throttle, CSD, SC_HUD_SHIELDS);
    MapKey(&Throttle, CSL, SC_HUD_WEAPONS);
    MapKey(&Throttle, CSR, SC_HUD_POWER);
    
    // Mic Switch
    MapKey(&Throttle, MSU, SC_SHIELD_FWD);
    MapKey(&Throttle, MSD, SC_SHIELD_AFT);
    MapKey(&Throttle, MSL, SC_SHIELD_LEFT);
    MapKey(&Throttle, MSR, SC_SHIELD_RIGHT);
    
    MapKey(&Throttle, MSP, SC_SHIELD_RESET);
    
    // Slew Control Button
    // TODO: Modified by boat switch -------------------------------------------
    //       FWD - Enable strafe in coupled mode
    //       MID - Aiming reticule control
    //       AFT - Decoupled mode control
    // -------------------------------------------------------------------------
    MapKey(&Throttle, SC, SC_IFCS_DECOUPLE);
    
    // Speed SC_Brake
    MapKey(&Throttle, SPDF, SC_AFTERBURNER);
    MapKey(&Throttle, SPDB, SC_BRAKE);
    
    // Boat Switch
    // MapKey(&Throttle, BSF,       );
    // MapKey(&Throttle, BSM,       );
    // MapKey(&Throttle, BSB,       );
    
    // China Hat
    MapKey(&Throttle, CHF, SC_AIM_RESET);
    // MapKey(&Throttle, CHM,       );
    MapKey(&Throttle, CHB, SC_SHIELD_RESET);
    
    // Left Throttle Button
    // MapKey(&Throttle, LTB, );
    
    // MapKey(&Throttle, EFLNORM,   );
    // MapKey(&Throttle, EFRNORM,   );
    // MapKey(&Throttle, EOLMOTOR,  );
    // MapKey(&Throttle, EORMOTOR,  );
    // MapKey(&Throttle, APUON,     );
    
    // Landing Gear Horn Silence
    MapKey(&Throttle, LDGH, SC_EJECT);
    
    // Flaps
    // MapKey(&Throttle, FLAPU,     );
    // MapKey(&Throttle, FLAPM,     );
    // MapKey(&Throttle, FLAPD,     );
    
    // MapKey(&Throttle, EACON,     );
    // MapKey(&Throttle, RDRNRM,    );
    
    // Autopilot Engage (Black Button On Base)
    MapKey(&Throttle, APENG, SC_USE_DOCKING);
    
    // MapKey(&Throttle, APPAT,     );
    // MapKey(&Throttle, APAH,      );
    // MapKey(&Throttle, APALT,     );
    // MapKey(&Throttle, IDLERON,   );
    // MapKey(&Throttle, IDLELON,   );
    // MapKey(&Throttle, EOLIGN,    );
    // MapKey(&Throttle, EORIGN,    );
    
    // MapKey(&Throttle, EFLOVER,   );
    // MapKey(&Throttle, EFROVER,   );
    // MapKey(&Throttle, APUOFF,    );
    // MapKey(&Throttle, EACOFF,    );
    // MapKey(&Throttle, RDRDIS,    );
    // MapKey(&Throttle, APDIS,     );
    // MapKey(&Throttle, IDLEROFF,  );
    // MapKey(&Throttle, IDLELOFF,  );
    // MapKey(&Throttle, EOLNORM,   );
    // MapKey(&Throttle, EORNORM,   );
    
    // ----------------
    // Left MFD Buttons
    // ----------------
    
    // MapKey(&LMFD, OSB01, );
    // MapKey(&LMFD, OSB02, );
    // MapKey(&LMFD, OSB03, RADAR_ACTIVE_PASSIVE);
    // MapKey(&LMFD, OSB04, );
    // MapKey(&LMFD, OSB05, );
    
    // MapKey(&LMFD, OSB06, RADAR_ON_OFF);
    // MapKey(&LMFD, OSB07, );
    // MapKey(&LMFD, OSB08, SHIELD_GEN_ON_OFF);
    // MapKey(&LMFD, OSB09, );
    // MapKey(&LMFD, OSB10, TARGETING_CPU_ON_OFF);
    
    // MapKey(&LMFD, OSB11, );
    // MapKey(&LMFD, OSB12, );
    MapKey(&LMFD, OSB13, SC_RUNNING_LIGHTS);
    // MapKey(&LMFD, OSB14, );
    MapKey(&LMFD, OSB15, SC_CABIN_LIGHTS);
    
    // MapKey(&LMFD, OSB16, );
    // MapKey(&LMFD, OSB17, );
    MapKey(&LMFD, OSB18, SC_SHIELD_BOOST_RECHARGE);
    // MapKey(&LMFD, OSB19, );
    MapKey(&LMFD, OSB20, SC_USE_DOCKING);
    
    MapKey(&LMFD, SYMU, SC_RADAR_ZOOM);
    MapKey(&LMFD, SYMD, SC_RADAR_ZOOM);
    // MapKey(&LMFD, CONU,  );
    // MapKey(&LMFD, COND,  );
    // MapKey(&LMFD, BRTU,  ); // Cycle Friendly Fwd
    // MapKey(&LMFD, BRTD,  ); // Cycle Friendly Back
    // MapKey(&LMFD, GAINU, RADAR_MODE_FWD);
    // MapKey(&LMFD, GAIND, RADAR_MOODE_BACK);
    
    // -----------------
    // Right MFD Buttons
    // -----------------
    
    MapKey(&RMFD, OSB01, SC_HUD_TAB_1);
    MapKey(&RMFD, OSB02, SC_HUD_TAB_2);
    MapKey(&RMFD, OSB03, SC_HUD_TAB_3);
    MapKey(&RMFD, OSB04, SC_HUD_TAB_4);
    MapKey(&RMFD, OSB05, SC_HUD_TAB_5);
    
    // MapKey(&RMFD, OSB06, HUD_CANCEL);
    // MapKey(&RMFD, OSB07, );
    MapKey(&RMFD, OSB08, SC_HUD_MAXIMIZE);
    // MapKey(&RMFD, OSB09, );
    // MapKey(&RMFD, OSB10, );
    
    MapKey(&RMFD, OSB11, SC_HUD_TAB_10);
    MapKey(&RMFD, OSB12, SC_HUD_TAB_9);
    MapKey(&RMFD, OSB13, SC_HUD_TAB_8);
    MapKey(&RMFD, OSB14, SC_HUD_TAB_7);
    MapKey(&RMFD, OSB15, SC_HUD_TAB_6);
    
    MapKey(&RMFD, OSB16, SC_SCOREBOARD);
    // MapKey(&RMFD, OSB17, );
    // MapKey(&RMFD, OSB18, HUD_INTERACT);
    // MapKey(&RMFD, OSB19, );
    MapKey(&RMFD, OSB20, SC_HUD_CONFIRM);
    
    MapKey(&RMFD, SYMU,  SC_HUD_LEFT_PANEL_UP);
    MapKey(&RMFD, SYMD,  SC_HUD_LEFT_PANEL_DOWN);
    MapKey(&RMFD, CONU,  SC_HUD_LEFT_PANEL_LEFT);
    MapKey(&RMFD, COND,  SC_HUD_LEFT_PANEL_RIGHT);
    // MapKey(&RMFD, BRTU, );
    // MapKey(&RMFD, BRTD, );
    MapKey(&RMFD, GAINU, SC_HUD_MODE_FWD);
    MapKey(&RMFD, GAIND, SC_HUD_MODE_BACK);
}

int EventHandle(int type, alias o, int x)
{
    DefaultMapping(&o, x);
}

int weapon_selector() {
    if (Throttle[PSB]) {
        // Inverted
        if (Joystick[TG1]) ActKey(KEYON+SC_WEAPON_GROUP_2); else ActKey(SC_WEAPON_GROUP_2);
        if (Joystick[TG2]) ActKey(KEYON+SC_WEAPON_GROUP_1); else ActKey(SC_WEAPON_GROUP_1);
        // LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1);
    }
    else if (Throttle[PSF]) {
    }
    else {
        // Normal
        if (Joystick[TG1]) ActKey(KEYON+SC_WEAPON_GROUP_1); else ActKey(SC_WEAPON_GROUP_1);
        if (Joystick[TG2]) ActKey(KEYON+SC_WEAPON_GROUP_2); else ActKey(SC_WEAPON_GROUP_2);
        // LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1);
    }
}

int power_selector() {
    if (Throttle[EACON]) {
        // Power Management
        if (Joystick[H3U]) ActKey(KEYON+SC_POWER_GROUP_RESET); else ActKey(SC_POWER_GROUP_RESET);
        if (Joystick[H3D]) ActKey(KEYON+SC_POWER_GROUP_3); else ActKey(SC_POWER_GROUP_3);
        if (Joystick[H3L]) ActKey(KEYON+SC_POWER_GROUP_1); else ActKey(SC_POWER_GROUP_1);
        if (Joystick[H3R]) ActKey(KEYON+SC_POWER_GROUP_2); else ActKey(SC_POWER_GROUP_2);
    }
    else {
        // Missile Management
        // if (Joystick[H3U]) ActKey(KEYON+DX11); else ActKey(DX11); // Dynamic Focus
        // if (Joystick[H3D]) ActKey(KEYON+DX13); else ActKey(DX13);
        if (Joystick[H3L]) ActKey(KEYON+SC_MISSILE_CYCLE_BACK); else ActKey(SC_MISSILE_CYCLE_BACK);
        if (Joystick[H3R]) ActKey(KEYON+SC_MISSILE_CYCLE_FWD); else ActKey(SC_MISSILE_CYCLE_FWD);
    }
}
